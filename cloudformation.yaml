AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DockerImage:
    Type: String
    Default: jkrup/snap-pixel-server-gateway:latest
Resources:
  EC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'VPC Security Group Allow 8080'
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: ::/0
      VpcId: !Ref EC2VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EC2VPC
  EC2PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
  EC2PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2VPC
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EC2PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EC2PublicSubnet2
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: auto-scaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties: 
      Scheme: internet-facing
      Subnets: 
        - !Ref EC2PublicSubnet1
        - !Ref EC2PublicSubnet2
      Type: application
      SecurityGroups:
        - !Ref EC2SecurityGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /h
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref EC2VPC
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - LogConfiguration:
            Options:
              awslogs-create-group: 'true'
              awslogs-group: /ecs/pixel-gateway
              awslogs-region: us-west-1
              awslogs-stream-prefix: ecs
            LogDriver: awslogs
          Name: gateway
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Essential: true
          Cpu: 256
          Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSExecutionRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: .25 vCPU
      Memory: .5 GB
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTP
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: gateway
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref EC2SecurityGroup
          Subnets: 
            - !Ref EC2PublicSubnet1
            - !Ref EC2PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 100
      ResourceId: !Join
        - '/'
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ECSService}ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ECSService}ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
Outputs:
  ClusterName:
    Description: The created cluster.
    Value: !Ref ECSCluster
  ECSService:
    Description: The created service.
    Value: !GetAtt ECSService.Name
  LoadBalancerDNS:
    Description: DNS name from load balancer.
    Value: !GetAtt LoadBalancer.DNSName
